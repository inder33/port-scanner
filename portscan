#!/usr/bin/env python3
import socket
import argparse
import threading
from datetime import datetime

open_ports =[]
lock = threading.Lock()

def scan_port(ip, port):
	try:
		sock = socket.socket()
		sock.settimeout(0.5)
		sock.connect((ip, port))
		try:
			banner = sock.recv(1024).decode().strip()
		except:
			banner = "NO BANNER"
		with lock:
			print(f"[+] Port {port} OPEN->{banner}")
			open_ports.append((port, banner))
		sock.close()
	except:
		pass

def main():
	parser = argparse.ArgumentParser(description="advance port scanner")
	parser.add_argument("-t", "--target", required=True, help="Target IP or Domain")
	parser.add_argument("-r", "--range", default="1-1024", help="port range like 20-1000")
	parser.add_argument("-o", "--output", help="File to save result", default="scan_result.txt")
	args = parser.parse_args()

	try:
		ip = socket.gethostbyname(args.target)
	except socket.gaierror:
		print("[-] Hostname could not be resolved.")

	start_port, end_port = map(int, args.range.split("-"))
	print(f"\n🚀 scanning {ip} from port {start_port} to {end_port}")
	print(f"started at {datetime.now()}\n")

	threads = []

	for port in range(start_port, end_port + 1):
		t = threading.Thread(target=scan_port, args=(ip, port))
		threads.append(t)
		t.start()

	for thread in threads:
		thread.join()

	print(f"\n✅scan complete at {datetime.now()}")

	if open_ports:
		with open(args.output, "w") as f:
			f.write(f"open ports for {args.target} ({ip})\n\n")
			for port, banner in open_ports:
				f.write(f"port {port}: {banner}\n") 
		print(f"\n 📁Result saved to {args.output}")
	else:
		print("no open ports found.")

if __name__ == "__main__":
	main()
